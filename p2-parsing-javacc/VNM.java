/* VNM.java */
/* Generated By:JavaCC: Do not edit this line. VNM.java */
public class VNM implements VNMConstants {

// Special tokens are saved, but not sent to the parser
// Hint: Perhaps comments should go here...?
// Remove the comments below when you're ready
//SPECIAL_TOKEN : 
//{

//}
  static final public 
void start() throws ParseException, ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:
    case LRND:
    case LSQU:
    case WHILE:
    case FOR:
    case IF:
    case FUNCTION:
    case RETURN:
    case PRINT:
    case PRINTLN:
    case VAR:
    case NUMBER:
    case IDNUM:
    case IDBOOL:
    case IDVEC:{
      statement();
      jj_consume_token(SCOL);
      break;
      }
    case 0:{
      jj_consume_token(0);
{if (true) throw new ParseException("End of File.");}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void statement() throws ParseException {
    if (jj_2_1(2)) {
      assign_stat();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        var_decl();
        break;
        }
      case FUNCTION:{
        fn_decl();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        if (jj_2_2(2)) {
          exp_start();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RETURN:{
            return_stat();
            break;
            }
          case PRINT:{
            print_stat();
            break;
            }
          case PRINTLN:{
            println_stat();
            break;
            }
          case IF:{
            if_stat();
            break;
            }
          case FOR:{
            for_stat();
            break;
            }
          case WHILE:{
            while_stat();
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
}

  static final public void exp_start() throws ParseException {
    expression();
}

  static final public void body() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case LRND:
      case LSQU:
      case WHILE:
      case FOR:
      case IF:
      case FUNCTION:
      case RETURN:
      case PRINT:
      case PRINTLN:
      case VAR:
      case NUMBER:
      case IDNUM:
      case IDBOOL:
      case IDVEC:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      statement();
      jj_consume_token(SCOL);
    }
}

  static final public void clause() throws ParseException {
    statement();
    jj_consume_token(SCOL);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case LRND:
      case LSQU:
      case WHILE:
      case FOR:
      case IF:
      case FUNCTION:
      case RETURN:
      case PRINT:
      case PRINTLN:
      case VAR:
      case NUMBER:
      case IDNUM:
      case IDBOOL:
      case IDVEC:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      statement();
      jj_consume_token(SCOL);
    }
}

  static final public void var_decl() throws ParseException {
    jj_consume_token(VAR);
    ident_list();
}

  static final public void fn_decl() throws ParseException {
    jj_consume_token(FUNCTION);
    identifier();
    jj_consume_token(LRND);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDNUM:
    case IDBOOL:
    case IDVEC:{
      ident_list();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RRND);
    body();
    jj_consume_token(END);
}

  static final public void ident_list() throws ParseException {
    identifier();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      identifier();
    }
}

  static final public void fn_call() throws ParseException {
    identifier();
    jj_consume_token(LRND);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:
    case LRND:
    case LSQU:
    case NUMBER:
    case IDNUM:
    case IDBOOL:
    case IDVEC:{
      exp_list();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(RRND);
}

  static final public void exp_list() throws ParseException {
    expression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      expression();
    }
}

  static final public void return_stat() throws ParseException {
    jj_consume_token(RETURN);
    if (jj_2_3(2)) {
      expression();
    } else if (jj_2_4(2)) {
      condition();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void print_stat() throws ParseException {
    jj_consume_token(PRINT);
    print_list();
}

  static final public void println_stat() throws ParseException {
    jj_consume_token(PRINTLN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:
    case LRND:
    case LSQU:
    case NUMBER:
    case IDNUM:
    case IDBOOL:
    case IDVEC:
    case STRING:{
      print_list();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
}

  static final public void print_list() throws ParseException {
    print_component();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      print_component();
    }
}

  static final public void print_component() throws ParseException {
    if (jj_2_5(2)) {
      expression();
    } else if (jj_2_6(2)) {
      jj_consume_token(STRING);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDBOOL:{
        jj_consume_token(IDBOOL);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  static final public void assign_stat() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDNUM:{
      jj_consume_token(IDNUM);
      jj_consume_token(ASSGN);
      expression();
      break;
      }
    case IDBOOL:{
      jj_consume_token(IDBOOL);
      jj_consume_token(ASSGN);
      condition();
      break;
      }
    case IDVEC:{
      jj_consume_token(IDVEC);
      jj_consume_token(ASSGN);
      vec_const();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void if_stat() throws ParseException {
    jj_consume_token(IF);
    condition();
    jj_consume_token(THEN);
    clause();
    elifs();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      clause();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(FI);
}

  static final public void elifs() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELIF:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      jj_consume_token(ELIF);
      condition();
      jj_consume_token(THEN);
      clause();
    }
}

  static final public void for_stat() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(IDNUM);
    jj_consume_token(IN);
    exp_list();
    jj_consume_token(DO);
    body();
    jj_consume_token(END);
}

  static final public void while_stat() throws ParseException {
    jj_consume_token(WHILE);
    condition();
    jj_consume_token(DO);
    body();
    jj_consume_token(END);
}

  static final public void condition() throws ParseException {
    or_clause();
}

  static final public void or_clause() throws ParseException {
    and_clause();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      jj_consume_token(OR);
      and_clause();
    }
}

  static final public void and_clause() throws ParseException {
    not_clause();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      jj_consume_token(AND);
      not_clause();
    }
}

  static final public void not_clause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      not_clause();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      if (jj_2_7(2)) {
        jj_consume_token(LRND);
        condition();
        jj_consume_token(RRND);
      } else if (jj_2_8(2)) {
        fn_call();
      } else if (jj_2_9(2)) {
        comparison();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case IDBOOL:{
          boolean_character();
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static final public void comparison() throws ParseException {
    expression();
    comparator();
    expression();
}

  static final public void expression() throws ParseException {
    summation();
}

  static final public void summation() throws ParseException {
    product();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      product();
    }
}

  static final public void product() throws ParseException {
    suffix_term();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PROD:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PROD:{
        jj_consume_token(PROD);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      suffix_term();
    }
}

  static final public void suffix_term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      suffix_term();
      break;
      }
    case LRND:
    case LSQU:
    case NUMBER:
    case IDNUM:
    case IDBOOL:
    case IDVEC:{
      term();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void term() throws ParseException {
    if (jj_2_10(2)) {
      jj_consume_token(LRND);
      expression();
      jj_consume_token(RRND);
    } else if (jj_2_11(2)) {
      fn_call();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSQU:
      case NUMBER:
      case IDNUM:
      case IDVEC:{
        simple_term();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  static final public void simple_term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDNUM:{
      jj_consume_token(IDNUM);
      break;
      }
    case IDVEC:{
      jj_consume_token(IDVEC);
      break;
      }
    case NUMBER:{
      jj_consume_token(NUMBER);
      break;
      }
    case LSQU:{
      vec_const();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void vec_const() throws ParseException {
    jj_consume_token(LSQU);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:
    case LRND:
    case LSQU:
    case NUMBER:
    case IDNUM:
    case IDBOOL:
    case IDVEC:{
      exp_list();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(RSQU);
}

  static final public void comparator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LESS:{
      jj_consume_token(LESS);
      break;
      }
    case LE:{
      jj_consume_token(LE);
      break;
      }
    case GREAT:{
      jj_consume_token(GREAT);
      break;
      }
    case GE:{
      jj_consume_token(GE);
      break;
      }
    case EQ:{
      jj_consume_token(EQ);
      break;
      }
    case NEQ:{
      jj_consume_token(NEQ);
      break;
      }
    case IN:{
      jj_consume_token(IN);
      break;
      }
    case NOTIN:{
      jj_consume_token(NOTIN);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void identifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDNUM:{
      jj_consume_token(IDNUM);
      break;
      }
    case IDBOOL:{
      jj_consume_token(IDBOOL);
      break;
      }
    case IDVEC:{
      jj_consume_token(IDVEC);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void boolean_character() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDBOOL:{
      jj_consume_token(IDBOOL);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_3R_vec_const_280_3_41()
 {
    if (jj_scan_token(LSQU)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_vec_const_280_11_42()) jj_scanpos = xsp;
    if (jj_scan_token(RSQU)) return true;
    return false;
  }

  static private boolean jj_3R_product_264_18_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    return false;
  }

  static private boolean jj_3R_exp_list_182_3_43()
 {
    if (jj_3R_expression_256_3_13()) return true;
    return false;
  }

  static private boolean jj_3R_simple_term_276_3_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_3R_simple_term_276_34_40()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_fn_call_178_3_15()
 {
    if (jj_3R_identifier_297_3_22()) return true;
    if (jj_scan_token(LRND)) return true;
    return false;
  }

  static private boolean jj_3R_term_272_3_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_term_272_70_38()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_scan_token(LRND)) return true;
    if (jj_3R_expression_256_3_13()) return true;
    return false;
  }

  static private boolean jj_3R_summation_260_14_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    return false;
  }

  static private boolean jj_3R_suffix_term_268_3_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_suffix_term_268_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_suffix_term_268_38_33()) return true;
    }
    return false;
  }

  static private boolean jj_3R_suffix_term_268_3_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    if (jj_3R_suffix_term_268_3_28()) return true;
    return false;
  }

  static private boolean jj_3R_product_264_3_24()
 {
    if (jj_3R_suffix_term_268_3_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_product_264_18_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_summation_260_3_20()
 {
    if (jj_3R_product_264_3_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_summation_260_14_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_expression_256_3_13()
 {
    if (jj_3R_summation_260_3_20()) return true;
    return false;
  }

  static private boolean jj_3R_comparison_252_3_16()
 {
    if (jj_3R_expression_256_3_13()) return true;
    if (jj_3R_comparator_285_5_23()) return true;
    return false;
  }

  static private boolean jj_3R_and_clause_238_17_31()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_not_clause_247_5_35()
 {
    if (jj_3R_boolean_character_301_3_37()) return true;
    return false;
  }

  static private boolean jj_3R_exp_start_154_3_12()
 {
    if (jj_3R_expression_256_3_13()) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_comparison_252_3_16()) return true;
    return false;
  }

  static private boolean jj_3R_or_clause_234_17_27()
 {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_fn_call_178_3_15()) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(LRND)) return true;
    if (jj_3R_condition_230_3_14()) return true;
    return false;
  }

  static private boolean jj_3R_not_clause_243_5_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_not_clause_243_5_34()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_not_clause_247_5_35()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_not_clause_243_5_34()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_not_clause_243_5_30()) return true;
    return false;
  }

  static private boolean jj_3R_term_272_70_38()
 {
    if (jj_3R_simple_term_276_3_39()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_exp_start_154_3_12()) return true;
    return false;
  }

  static private boolean jj_3R_and_clause_238_3_26()
 {
    if (jj_3R_not_clause_243_5_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_and_clause_238_17_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_assign_stat_207_5_11()) return true;
    return false;
  }

  static private boolean jj_3R_or_clause_234_3_21()
 {
    if (jj_3R_and_clause_238_3_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_or_clause_234_17_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_condition_230_3_14()
 {
    if (jj_3R_or_clause_234_3_21()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_condition_230_3_14()) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_3R_fn_call_178_3_15()) return true;
    return false;
  }

  static private boolean jj_3R_simple_term_276_34_40()
 {
    if (jj_3R_vec_const_280_3_41()) return true;
    return false;
  }

  static private boolean jj_3R_assign_stat_209_5_19()
 {
    if (jj_scan_token(IDVEC)) return true;
    if (jj_scan_token(ASSGN)) return true;
    return false;
  }

  static private boolean jj_3R_assign_stat_208_5_18()
 {
    if (jj_scan_token(IDBOOL)) return true;
    if (jj_scan_token(ASSGN)) return true;
    return false;
  }

  static private boolean jj_3R_assign_stat_207_5_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_assign_stat_207_5_17()) {
    jj_scanpos = xsp;
    if (jj_3R_assign_stat_208_5_18()) {
    jj_scanpos = xsp;
    if (jj_3R_assign_stat_209_5_19()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_assign_stat_207_5_17()
 {
    if (jj_scan_token(IDNUM)) return true;
    if (jj_scan_token(ASSGN)) return true;
    return false;
  }

  static private boolean jj_3R_suffix_term_268_38_33()
 {
    if (jj_3R_term_272_3_36()) return true;
    return false;
  }

  static private boolean jj_3R_boolean_character_301_3_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_expression_256_3_13()) return true;
    return false;
  }

  static private boolean jj_3R_identifier_297_3_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_expression_256_3_13()) return true;
    return false;
  }

  static private boolean jj_3R_vec_const_280_11_42()
 {
    if (jj_3R_exp_list_182_3_43()) return true;
    return false;
  }

  static private boolean jj_3R_comparator_285_5_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public VNMTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x140c001,0x0,0x0,0x140c000,0x140c000,0x0,0x4000000,0x140c000,0x4000000,0x140c000,0x4000000,0x0,0x0,0x0,0x0,0x80000,0x40000,0x100000,0x30000000,0xc000,0xc000,0x30000,0x30000,0xc000,0x140c000,0x1000000,0x1000000,0x140c000,0x3fc0,0x0,0x30000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xf1d87,0x1080,0xd07,0xf1d87,0xf1d87,0xe0000,0x0,0xf0000,0x0,0x2f0000,0x0,0x40000,0xe0000,0x20,0x10,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0xf0000,0xb0000,0xb0000,0xf0000,0x0,0xe0000,0x40000,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[11];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public VNM(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public VNM(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new VNMTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public VNM(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new VNMTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new VNMTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public VNM(VNMTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(VNMTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[54];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 31; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 54; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 11; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

  // Nothing to do here for Part #1
}
