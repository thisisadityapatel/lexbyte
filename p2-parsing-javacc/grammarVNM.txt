start		::=	statement ";" | EOF

statement	::=	assign_stat | var_decl | fn_decl | exp_start | return_stat | print_stat | println_stat | if_stat | for_stat | while_stat

exp_start   ::= expression

body        ::= (statement ";")*

clause      ::= statement ";" (statement ";")*

var_decl	::=	VAR ident_list

fn_decl		::=	FUNCTION identifier "(" (ident_list)? ")" body END

ident_list	::=	identifier ("," identifier)*

fn_call		::=	identifier "(" (exp_list)? ")"

exp_list	::=	expression ("," expression)*

return_stat	::=	RETURN (expression | condition)

print_stat  ::=	PRINT print_list

println_stat ::= PRINTLN (print_list)?

print_list	::=	print_component ("," print_component)*

print_component ::= expression | STRING | IDBOOL

assign_stat ::= IDNUM ":=" expression | IDBOOL ":=" condition | IDVEC ":=" vec_const

if_stat		::=	IF condition THEN clause elifs (ELSE clause)? FI

elifs		::=	(ELIF condition THEN clause)*

for_stat	::=	FOR IDNUM =IN exp_list DO body END

while_stat	::=	WHILE condition DO body END

condition	::=	or_clause

or_clause   ::= and_clause ("|" and_clause)*

and_clause	::=	not_clause ("&" not_clause)*

not_clause	::=	"!" not_clause | "(" condition ")" | comparison | fn_call | boolean

comparison	::=	expression comparator expression

expression  ::= summation

summation   ::= product (("+" | "-") product)*

product		::=	suffix_term (("*" | "/") suffix_term)*

suffix_term ::= ("+" | "-") suffix_term | term

term		::=	"(" expression ")" | fn_call | simple_term

simple_term	::=	IDNUM | IDVEC | NUMBER | vec_const 

vec_const	::=	"[" (exp_list)? "]"

comparator	::=	"<" | "<=" | ">" | ">=" |"==" | "!=" | "=in" | "!in"

identifier	::=	IDNUM | IDBOOL | IDVEC 

boolean		::=	IDBOOL | TRUE | FALSE
