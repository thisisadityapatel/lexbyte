void start() throws ParseException		 :
{}
{	statement() ";"
| <EOF>
|	< EOF > {throw new ParseException("End of File.");}
}

void statement()	 :
{}
{	var_decl()
| fn_decl()
| exp_start()
| return_stat()
| print_stat()
| println_stat()
| assign_stat()
| if_stat()
| for_stat()
| while_stat()
}

void exp_start() :
{}
{ expression()
}

void body() :
{}
{ (statement() ";")*
}

void clause() :
{}
{ statement() ";" body()
}

void var_decl()	 :
{}
{	<VAR> ident_list()
}

void fn_decl()		 :
{}
{	<FUNCTION> identifier() "(" (ident_list())? ")" body() <END>
}

void ident_list()	 :
{}
{	identifier() ("," identifier())*
}

void fn_call()		 :
{}
{	identifier() "(" (exp_list())? ")"
}

void exp_list()	 :
{}
{	expression() ("," expression())*
}

void return_stat()	 :
{}
{	<RETURN> (expression()
| condition())
}

void print_stat() :
{}
{	<PRINT> print_list()
}

void println_stat() :
{}
{ <PRINTLN> (print_list())?
}

void print_list()	 :
{}
{	print_component() ("," print_component())*
}

void print_component() :
{}
{ expression()
| <STRING>
| <IDBOOL>
}

void assign_stat() :
{}
{ <IDNUM> ":=" expression()
| <IDBOOL> ":=" condition()
| <IDVEC> ":=" vec_const()
}

void if_stat()		 :
{}
{	<IF> condition() <THEN> clause() elifs() (<ELSE> clause())? <FI>
}

void elifs()		 :
{}
{	(<ELIF> condition() <THEN> clause())*
}

void for_stat()	 :
{}
{	<FOR> <IDNUM> =<IN> exp_list() <DO> body() <END>
}

void while_stat()	 :
{}
{	<WHILE> condition() <DO> body() <END>
}

void condition()	 :
{}
{	or_clause()
}

void or_clause() :
{}
{ and_clause() ("|" and_clause())*
}

void and_clause()	 :
{}
{	not_clause() ("&" not_clause())*
}

void not_clause()	 :
{}
{	"!" not_clause()
| "(" condition() ")"
| comparison()
| fn_call()
| boolean()
}

void comparison()	 :
{}
{	expression() comparator() expression()
}

void expression() :
{}
{ summation()
}

void summation() :
{}
{ product() (("+"
| "-") product())*
}

void product()		 :
{}
{	suffix_term() (("*"
| "/") suffix_term())*
}

void suffix_term() :
{}
{ ("+"
| "-") suffix_term()
| term()
}

void term()		 :
{}
{	"(" expression() ")"
| fn_call()
| simple_term()
}

void simple_term()	 :
{}
{	<IDNUM>
| <IDVEC>
| <NUMBER>
| vec_const() 
}

void vec_const()	 :
{}
{	"[" (exp_list())? "]"
}

void comparator()	 :
{}
{	"<"
| "<="
| ">"
| ">="
|"=="
| "!="
| "=in()"
| "!in()"
}

void identifier()	 :
{}
{	<IDNUM>
| <IDBOOL>
| <IDVEC> 
}

void boolean()		 :
{}
{	<IDBOOL>
| <TRUE>
| <FALSE>
}